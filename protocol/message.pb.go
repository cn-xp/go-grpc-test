// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/message.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserType int32

const (
	UserType_UNKNOW        UserType = 0
	UserType_ADMIN         UserType = 1
	UserType_BUSINESS_USER UserType = 2
)

var UserType_name = map[int32]string{
	0: "UNKNOW",
	1: "ADMIN",
	2: "BUSINESS_USER",
}

var UserType_value = map[string]int32{
	"UNKNOW":        0,
	"ADMIN":         1,
	"BUSINESS_USER": 2,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_89254f84d2f8e90f, []int{0}
}

type User struct {
	UserId   int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*User_Error
	//	*User_Code
	Msg                  isUser_Msg        `protobuf_oneof:"msg"`
	Name                 string            `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	UserType             UserType          `protobuf:"varint,9,opt,name=userType,proto3,enum=protocol.UserType" json:"userType,omitempty"`
	Roles                []int32           `protobuf:"varint,10,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	File                 *File             `protobuf:"bytes,11,opt,name=file,proto3" json:"file,omitempty"`
	Hobbys               map[string]string `protobuf:"bytes,12,rep,name=hobbys,proto3" json:"hobbys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_89254f84d2f8e90f, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

type isUser_Msg interface {
	isUser_Msg()
}

type User_Error struct {
	Error string `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}
type User_Code struct {
	Code int32 `protobuf:"varint,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
}

func (*User_Error) isUser_Msg() {}
func (*User_Code) isUser_Msg()  {}

func (m *User) GetMsg() isUser_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *User) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetError() string {
	if x, ok := m.GetMsg().(*User_Error); ok {
		return x.Error
	}
	return ""
}

func (m *User) GetCode() int32 {
	if x, ok := m.GetMsg().(*User_Code); ok {
		return x.Code
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_UNKNOW
}

func (m *User) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *User) GetHobbys() map[string]string {
	if m != nil {
		return m.Hobbys
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*User) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*User_Error)(nil),
		(*User_Code)(nil),
	}
}

func init() {
	proto.RegisterEnum("protocol.UserType", UserType_name, UserType_value)
	proto.RegisterType((*User)(nil), "protocol.User")
	proto.RegisterMapType((map[string]string)(nil), "protocol.User.HobbysEntry")
}

func init() { proto.RegisterFile("protocol/message.proto", fileDescriptor_89254f84d2f8e90f) }

var fileDescriptor_89254f84d2f8e90f = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x8e, 0xd3, 0x40,
	0x10, 0xf4, 0xc4, 0x8f, 0xb5, 0xdb, 0x10, 0x99, 0x66, 0x15, 0x8d, 0x7c, 0xb2, 0x7c, 0xb2, 0x40,
	0xf2, 0x22, 0xc3, 0x01, 0xf6, 0x46, 0x44, 0x50, 0x02, 0xc2, 0x48, 0x63, 0x2c, 0x24, 0x2e, 0xc8,
	0xc9, 0x0e, 0x21, 0xc2, 0x59, 0xaf, 0x66, 0x92, 0x48, 0xfe, 0x16, 0x3e, 0x91, 0x9f, 0x40, 0x33,
	0x7e, 0x40, 0x38, 0x00, 0xb7, 0xae, 0xae, 0xea, 0x72, 0x77, 0x79, 0x60, 0x76, 0x27, 0x9a, 0x43,
	0xb3, 0x69, 0xea, 0xab, 0x3d, 0x97, 0xb2, 0xda, 0xf2, 0x54, 0x37, 0xd0, 0x1d, 0xfa, 0xe1, 0xc3,
	0x51, 0xf1, 0x65, 0x57, 0xf7, 0x74, 0xfc, 0x63, 0x02, 0x56, 0x29, 0xb9, 0xc0, 0x19, 0x38, 0x47,
	0xc9, 0xc5, 0xea, 0x86, 0x92, 0x88, 0x24, 0x36, 0xeb, 0x11, 0x86, 0xe0, 0xaa, 0xea, 0xb6, 0xda,
	0x73, 0x3a, 0x89, 0x48, 0xe2, 0xb1, 0x11, 0xe3, 0x0c, 0x6c, 0x2e, 0x44, 0x23, 0xa8, 0xa9, 0x88,
	0xa5, 0xc1, 0x3a, 0x88, 0x97, 0x60, 0x6d, 0x9a, 0x1b, 0x4e, 0x2d, 0xe5, 0xb4, 0x34, 0x98, 0x46,
	0x88, 0x60, 0x69, 0x17, 0x57, 0xbb, 0xe8, 0x1a, 0xd3, 0xce, 0xfd, 0x43, 0x7b, 0xc7, 0xa9, 0x17,
	0x91, 0x64, 0x9a, 0x61, 0x3a, 0xac, 0x99, 0x96, 0x3d, 0xc3, 0x46, 0x0d, 0x5e, 0x82, 0x2d, 0x9a,
	0x9a, 0x4b, 0x0a, 0x91, 0x99, 0xd8, 0xac, 0x03, 0x18, 0x83, 0xa5, 0x4e, 0xa2, 0x7e, 0x44, 0x12,
	0x3f, 0x9b, 0xfe, 0x72, 0x78, 0xbd, 0xab, 0x39, 0xd3, 0x1c, 0x66, 0xe0, 0x7c, 0x6d, 0xd6, 0xeb,
	0x56, 0xd2, 0x7b, 0x91, 0x99, 0xf8, 0x59, 0x78, 0xfe, 0x9d, 0x74, 0xa9, 0xc9, 0xc5, 0xed, 0x41,
	0xb4, 0xac, 0x57, 0x86, 0x2f, 0xc0, 0xff, 0xad, 0x8d, 0x01, 0x98, 0xdf, 0x78, 0xab, 0xf3, 0xf1,
	0x98, 0x2a, 0xd5, 0x3a, 0xa7, 0xaa, 0x3e, 0x0e, 0xc9, 0x74, 0xe0, 0x7a, 0xf2, 0x9c, 0xcc, 0x6d,
	0x30, 0xf7, 0x72, 0xfb, 0xc6, 0x72, 0x9d, 0xc0, 0x65, 0x17, 0x5d, 0x96, 0xd9, 0xa3, 0x67, 0xe0,
	0x0e, 0x47, 0x21, 0x80, 0x53, 0xe6, 0x6f, 0xf3, 0xf7, 0x1f, 0x03, 0x03, 0x3d, 0xb0, 0x5f, 0xbe,
	0x7a, 0xb7, 0xca, 0x03, 0x82, 0x0f, 0xe0, 0xfe, 0xbc, 0x2c, 0x56, 0xf9, 0xa2, 0x28, 0x3e, 0x97,
	0xc5, 0x82, 0x05, 0x93, 0xec, 0x3b, 0x01, 0x5f, 0x8d, 0x15, 0x5c, 0x9c, 0x76, 0x1b, 0x8e, 0x8f,
	0xe1, 0x62, 0xcb, 0x0f, 0xfa, 0xaf, 0x4d, 0xcf, 0xaf, 0x08, 0xff, 0xc0, 0xb1, 0xa1, 0x12, 0xee,
	0xc5, 0xf2, 0xdf, 0xea, 0x27, 0x04, 0xaf, 0xc0, 0x93, 0xd5, 0x89, 0xff, 0xe7, 0x40, 0x42, 0xb2,
	0x6b, 0xf0, 0x55, 0xcc, 0xe7, 0xcb, 0xa9, 0xce, 0xdf, 0xa6, 0x15, 0x1f, 0x1b, 0x73, 0xf8, 0x34,
	0x3e, 0xcf, 0xb5, 0xa3, 0xab, 0xa7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x61, 0xba, 0xbe, 0x84,
	0xc9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (UserService_GetUsersClient, error)
	SaveUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveUsersClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protocol.UserService/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (UserService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/protocol.UserService/getUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SaveUsers(ctx context.Context, opts ...grpc.CallOption) (UserService_SaveUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/protocol.UserService/saveUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSaveUsersClient{stream}
	return x, nil
}

type UserService_SaveUsersClient interface {
	Send(*User) error
	CloseAndRecv() (*User, error)
	grpc.ClientStream
}

type userServiceSaveUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceSaveUsersClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSaveUsersClient) CloseAndRecv() (*User, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUser(context.Context, *User) (*User, error)
	GetUsers(*User, UserService_GetUsersServer) error
	SaveUsers(UserService_SaveUsersServer) error
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUsers(req *User, srv UserService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedUserServiceServer) SaveUsers(srv UserService_SaveUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveUsers not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUsers(m, &userServiceGetUsersServer{stream})
}

type UserService_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_SaveUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SaveUsers(&userServiceSaveUsersServer{stream})
}

type UserService_SaveUsersServer interface {
	SendAndClose(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServiceSaveUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceSaveUsersServer) SendAndClose(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSaveUsersServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUsers",
			Handler:       _UserService_GetUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "saveUsers",
			Handler:       _UserService_SaveUsers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/message.proto",
}

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileServiceClient interface {
	GetFile(ctx context.Context, in *User, opts ...grpc.CallOption) (*File, error)
}

type fileServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileServiceClient(cc *grpc.ClientConn) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *User, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/protocol.FileService/getFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
type FileServiceServer interface {
	GetFile(context.Context, *User) (*File, error)
}

// UnimplementedFileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (*UnimplementedFileServiceServer) GetFile(ctx context.Context, req *User) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}

func RegisterFileServiceServer(s *grpc.Server, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.FileService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFile(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getFile",
			Handler:    _FileService_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/message.proto",
}
